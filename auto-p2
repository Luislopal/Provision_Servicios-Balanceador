#Importar librerias
import sys
import os
import re
import time
from lxml import etree
from subprocess import call


#Se lee el parámetro <orden>
orden = sys.argv[1]

#Primera orden a ejecutar
if(orden == "prepare"):

	
	#Crea el fichero de configuración
	call(["touch", "auto-p2.json"])

	
	#Comprueba si se ha pasado parámetro de número de servidores
	if len(sys.argv) >= 3:
		#Comprueba que está entre 1 y 5
		if int(sys.argv[2]) >= 1 and int(sys.argv[2]) <= 5:
			num_serv = int(sys.argv[2])
		else:
		#Si no está entre 1 y 5, acaba la ejecución y sale el siguiente error
			sys.exit("El numero de máquinas virtuales debe estar entre 1 y 5")
	else:
	#Si no se pasa parámetro, por defecto a 3
		num_serv = 3 

	#Escribe y guarda el numero de servidores en el archivo auto-p2.json   
	configuracion = open("auto-p2.json", "w+")    
	configuracion.write('"num_serv" : %d' % num_serv)
	configuracion.close()

	#Mete en un array todos los nombres de las máquinas.
	machines = ['c1','lb']
	for i in range(num_serv):
		machines.append('s'+ str(i))

	#Crea las LAN virtuales para conectar las maquinas	
	call(["sudo", "brctl", "addbr", "LAN1"])
	call(["sudo", "brctl", "addbr", "LAN2"])
	call(["sudo", "ifconfig", "LAN1", "up"])
	call(["sudo", "ifconfig", "LAN2", "up"])

	#Configura la conexión del host
	call(["sudo", "ifconfig", "LAN1", "10.0.1.3/24"])
	call(["sudo", "ip", "route", "add", "10.0.0.0/16", "via", "10.0.1.1"])


	#Da permisos a la imagen base 
	call(["chmod", "777", "cdps-vm-base-pc1.qcow2"])

	
	#Crea las imagenes de las maquinas virtuales
	for i in machines:
		call(["qemu-img", "create", "-f", "qcow2", "-b", "cdps-vm-base-pc1.qcow2", i+".qcow2"])
		call(["cp", "plantilla-vm-pc1.xml", i+".xml"])
		# Carga el fichero xml
		tree = etree.parse(i+".xml")
		# Obtiene el nodo raiz e imprimimos su nombre y el valor del atributo 'tipo'
		root = tree.getroot()
		# Buscamos la etiqueta 'nombre' y lo cambiamos
		domain = root.find("domain")
		name = root.find("name")
		name.text = i
		# Busca la etiqueta 'source' y lo cambiamos
		source = root.find("./devices/disk/source")
		#Busca la ruta absoluta de la imagen de la MV
		ruta = os.path.abspath(i+".qcow2")
		source.set("file", ruta)
		

		# Busca la etiqueta 'source' dentro de 'interface' y lo cambia dependiendo de la máquina
		if (i == "c1") or (i == "lb"):
			interface = root.find("./devices/interface/source")
			interface.set("bridge", "LAN1")
		else: 
			interface = root.find("./devices/interface/source")
			interface.set("bridge", "LAN2")
		#Crea la interfaz para LAN 2 si es el caso de lb
		if i == "lb":
			interface_tag = etree.Element("interface", type="bridge")
			devices_tag = root.find("devices")
			interface_tag.text = ""
			devices_tag.append(interface_tag)
			source_tag = etree.Element("source", bridge="LAN2")
			model_tag = etree.Element("model", type="virtio")
			interface_tag.append(source_tag)
			interface_tag.append(model_tag)
		#Guarda el contenido del fichero XML
		tree.write(i+".xml")

		#Define las MV
		call(["sudo", "virsh", "define",  str(i) + ".xml"])

		#Configuracion del fichero hostname

		call(["touch", "hostname"])
		#w+ es una orden para actualizar el contenido del fichero
		fin = open ("hostname","w+")
		fin.write(str(i))
		fin.close()
		call(["chmod", "777", "hostname"])
		#Copia a la máquina virtual el fichero
		#-a hace referencia a la imagen de la MV a la que se va a copiar
		call(["sudo", "virt-copy-in", "-a", str(i) + ".qcow2", "hostname", "/etc"])
		#Configuración de los ficheros index.html para los servidores
		if str(i) == "s0" or str(i) == "s1" or str(i) == "s2" or str(i) == "s3" or str(i) == "s4":
			#Copia el archivo hostname ya que el contenido de ambos es el mismo
			call(["cp", "hostname", "index.html"])
			call(["sudo", "virt-copy-in", "-a", str(i) + ".qcow2", "index.html", "/var/www/html"])

		#Configura el archivo hosts     
		call(["cp", "/etc/hosts", "hosts"])
		fin = open ("hosts","w")
		fout = open ("/etc/hosts", "r")
		for line in fout:
			if "127.0.0.1 localhost" in line:
				fin.write("127.0.1.1 " + str(i) + "\n")
			else:
				fin.write(line)
		fin.close()
		fout.close()
		call(["sudo", "virt-copy-in", "-a", str(i) + ".qcow2", "hosts", "/etc"])

		#Configura el archivo interfaces
		
		call(["touch","interfaces"])
		fout = open("interfaces","w+")
		
		if str(i) == "s0":
			#Configura la ip propia
			fout.write("auto lo \n")
			fout.write("iface lo inet loopback \n\n")
			#Configura la interfaz eth0
			fout.write("auto eth0 \n")
			fout.write("iface eth0 inet static \n")
			fout.write("\taddress 10.0.2.11 \n")
			fout.write("\tnetmask 255.255.255.0 \n")
			fout.write("\tgateway 10.0.2.1 \n")
			fout.write("\tdns-nameservers 10.0.2.1 \n")
		if str(i) == "s1":
			fout.write("auto lo \n")
			fout.write("iface lo inet loopback \n\n")
			fout.write("auto eth0 \n")
			fout.write("iface eth0 inet static \n")
			fout.write("\taddress 10.0.2.12 \n")
			fout.write("\tnetmask 255.255.255.0 \n")
			fout.write("\tgateway 10.0.2.1 \n")
			fout.write("\tdns-nameservers 10.0.2.1 \n")
		if str(i) == "s2":
			fout.write("auto lo \n")
			fout.write("iface lo inet loopback \n\n")
			fout.write("auto eth0 \n")
			fout.write("iface eth0 inet static \n")
			fout.write("\taddress 10.0.2.13 \n")
			fout.write("\tnetmask 255.255.255.0 \n")
			fout.write("\tgateway 10.0.2.1 \n")
			fout.write("\tdns-nameservers 10.0.2.1 \n")
		if str(i) == "s3":
			fout.write("auto lo \n")
			fout.write("iface lo inet loopback \n\n")
			fout.write("auto eth0 \n")
			fout.write("iface eth0 inet static \n")
			fout.write("\taddress 10.0.2.14 \n")
			fout.write("\tnetmask 255.255.255.0 \n")
			fout.write("\tgateway 10.0.2.1 \n")
			fout.write("\tdns-nameservers 10.0.2.1 \n")
		if str(i) == "s4":
			fout.write("auto eth0 \n")
			fout.write("iface eth0 inet static \n")
			fout.write("\taddress 10.0.2.15 \n")
			fout.write("\tnetmask 255.255.255.0 \n")
			fout.write("\tgateway 10.0.2.1 \n")
			fout.write("\tdns-nameservers 10.0.2.1 \n")
		if str(i) == "lb":
			fout.write("auto lo \n")
			fout.write("iface lo inet loopback \n\n")
			fout.write("auto eth0 eth1\n")
			fout.write("iface eth0 inet static \n")
			fout.write("\taddress 10.0.1.1 \n")
			fout.write("\tnetmask 255.255.255.0 \n")
			fout.write("\tgateway 10.0.1.1 \n")
			fout.write("\tdns-nameservers 10.0.1.1 \n")
			fout.write("iface eth1 inet static \n")
			fout.write("\taddress 10.0.2.1 \n")
			fout.write("\tnetmask 255.255.255.0 \n")
			fout.write("\tgateway 10.0.2.1 \n")
			fout.write("\tdns-nameservers 10.0.2.1 \n")
		if str(i) == "c1":
			fout.write("auto lo \n")
			fout.write("iface lo inet loopback \n\n")
			fout.write("auto eth0 \n")
			fout.write("iface eth0 inet static \n")
			fout.write("\taddress 10.0.1.2 \n")
			fout.write("\tnetmask 255.255.255.0 \n")
			fout.write("\tgateway 10.0.1.1 \n")
			fout.write("\tdns-nameservers 10.0.2.1 \n")
		
		fout.close()
		call(["sudo", "virt-copy-in", "-a", str(i) + ".qcow2", "interfaces", "/etc/network"])
		call(["rm","-f","interfaces"])
		#Configura la maquina lb para distribuir trafico
		if str(i) == "lb":
			#Saca de la MV el archivo haproxy
			call(["sudo", "virt-copy-out", "-a", str(i) + ".qcow2", "/etc/haproxy/haproxy.cfg", "."])
			call(["touch", "haproxy2.cfg"])
			fout = open("haproxy.cfg", "r")
			fin = open("haproxy2.cfg", "w")
			for line in fout:
				fin.write(line)
			fin.write("\nfrontend lb \n")
			fin.write("\tbind *:80\n")
			fin.write("\tmode http\n")
			fin.write("\tdefault_backend webservers\n")
			fin.write("\nbackend webservers\n")
			fin.write("\tmode http\n")
			fin.write("\tbalance roundrobin\n")
			for j in machines:
				if j == "s0":
					fin.write("\tserver s0 10.0.2.11:80 check\n")
				if j == "s1":
					fin.write("\tserver s1 10.0.2.12:80 check\n")
				if j == "s2":
					fin.write("\tserver s2 10.0.2.13:80 check\n")
				if j == "s3":
					fin.write("\tserver s3 10.0.2.14:80 check\n")
				if j == "s4":
					fin.write("\tserver s4 10.0.2.15:80 check\n")
			fin.close()
			fout.close()
			call(["rm", "-f", "haproxy.cfg"])
			call(["cp", "haproxy2.cfg", "haproxy.cfg"])
			call(["rm", "-f", "haproxy2.cfg"])
			call(["sudo", "virt-copy-in", "-a", str(i) + ".qcow2", "haproxy.cfg", "/etc/haproxy"])
			#Habilita balanceo de tráfico, permitiendo el forwarding en ipv4 (Descomenta net.ipv4.ip_forward)
			orden = "sudo virt-edit -a lb.qcow2 /etc/sysctl.conf -e \'s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/\'"
			os.system(orden)	

	
#Segunda orden a ejecutar
elif(orden == "launch"): 
	#Lee el numero de maquinas y genera el array con todas ellas
	file = open('auto-p2.json', 'r')
	fichero = file.read()
	#Busca el num_serv mediante una expresión regular
	num_serv = int(re.findall(r'\d+', fichero)[0])

	#Crea el array con los nombres de las máquinas
	machines = ['c1','lb']
	i = 0
	while i < num_serv:
		machines.append('s'+ str(i))
		i = i + 1

	#Define y configura de las maquinas
	for i in machines:
		
		#Arranca las maquinas
		call(["sudo", "virsh", "start", str(i)])
		#Arranca las consolas
		sttr = 'xterm -e  \'sudo virsh console ' + i + '\' & \n'
		os.system (sttr)
	time.sleep(6)
	print("¡Se ha arrancado el escenario con éxito!")


#Tercera orden a ejecutar
elif(orden == "stop"):
	#Lee el numero de maquinas y genera el array con todas ellas
	file = open('auto-p2.json', 'r')
	string = file.read()
	num_serv = int(re.findall(r'\d+', string)[0])
	#Crea el array con los nombres de las máquinas
	machines = ['c1','lb']
	for i in range(num_serv):
		machines.append('s'+ str(i))
	#Apaga las máquinas
	for i in machines:
		os.system("sudo virsh shutdown " + i)

#Cuarta orden a ejecutar
elif(orden == "release"):
	#Lee el numero de maquinas y genera el array con todas ellas
	file = open("auto-p2.json", 'r')
	string = file.read()
	num_serv = int(re.findall(r'\d+', string)[0])
	#Crea el array con los nombres de las máquinas
	machines = ['c1','lb']
	for i in range(num_serv):
		machines.append('s'+ str(i))
	#Elimina la definición de las MV así como las imágenes y los XML
	for i in machines:
		call(["sudo", "virsh", "destroy", i])  
		call(["rm", "-f", i+".qcow2"])
		call(["rm", "-f", i+".xml"])
	#Elimina las LAN virtuales 
	call(["sudo", "ifconfig", "LAN1", "down"])
	call(["sudo", "ifconfig", "LAN2", "down"])	
	call(["sudo", "brctl", "delbr", "LAN1"])
	call(["sudo", "brctl", "delbr", "LAN2"])
	
	#Elimina el resto de ficheros auxiliares
	call(["rm", "-f", "hostname"])
	call(["rm", "-f", "hosts"])
	call(["rm", "-f", "auto-p2.json"])
	call(["rm", "-f", "haproxy.cfg"])
	call(["rm", "-f", "index.html"])
	

#Quinta orden a ejecutar(opcional)
elif(orden == "watch"):
	#Lee el numero de maquinas y genera el array con todas ellas
	file = open("auto-p2.json", 'r')
	string = file.read()
	num_serv = int(re.findall(r'\d+', string)[0])
	#Crea el array con los nombres de las máquinas
	machines = ['c1','lb'] 	
	for i in range(num_serv):
		machines.append('s'+ str(i))
	#Obtiene info de MV
	for i in machines:
		call(["sudo", "virsh", "domstate", i])
		call(["sudo", "virsh", "dominfo", i])
		call(["sudo", "virsh", "cpu-stats", i])


		
